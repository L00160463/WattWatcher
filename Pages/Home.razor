@page "/"
@using WattWatcher.Data
@inject UIDataService UIDataService

<h1 class="text-center mt-5 pt-3">Welcome to Your Smart Home Dashboard</h1>
<h3 class="text-center mt-2">Electricity Consumption This Week</h3>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10 col-sm-12">
            <div class="card shadow-sm p-3 mb-5 bg-white rounded">
                <div class="card-body">
                    @if (CircuitsData.Count > 0)
                    {
                        <ApexChart TItem="ElectricModel"
                                   Title="Electricity Consumption this Week">
                            <ApexPointSeries TItem="ElectricModel"
                                             Items="@CircuitsData"
                                             SeriesType="SeriesType.Donut"
                                             Name="Amperage"
                                             XValue="@(e => e.ID.ToString())"
                                             YValue="@(e => (decimal)e.Amps)" />
                        </ApexChart>
                    }
                    else
                    {
                        <p>No data available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<ElectricModel> CircuitsData { get; set; } = new List<ElectricModel>();

    protected override void OnInitialized()
    {
        UIDataService.OnDataUpdated += DataUpdatedHandler;
    }

    private void DataUpdatedHandler(List<ElectricModel> data)
    {
        InvokeAsync(() =>
        {
            CircuitsData = data;
            StateHasChanged(); // Re-render the component with the new data
        });
    }

    public void Dispose()
    {
        UIDataService.OnDataUpdated -= DataUpdatedHandler; // Cleanup to avoid memory leaks
    }
}
