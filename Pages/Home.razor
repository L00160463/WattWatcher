@page "/"
@using WattWatcher.Data
@inject UIDataService UIDataService

<h1 class="text-center mt-5 pt-3">Welcome to Your Smart Home Dashboard</h1>
<h3 class="text-center mt-2">View Your Electricity Consumption</h3>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10 col-sm-12">
            <div class="card shadow-sm p-3 mb-5 bg-white rounded">
                <div class="card-body">
                    @if (CircuitsData.Count > 0)
                    {
                        <ApexChart TItem="ElectricModel"
                                   Title="Electricity Consumption"
                                   Options="options"
                                   @key="@updateKey">
                            <ApexPointSeries TItem="ElectricModel"
                                             Items="@CircuitsData"
                                             SeriesType="SeriesType.Donut"
                                             Name="Amperage"
                                             XValue="@(e => e.CircuitName)"
                                             YValue="@(e => e.Amps)" />
                        </ApexChart>
                    }
                    else
                    {
                        <p>Loading Data...</p>
                    }
                </div>
            </div>

            <!-- Set Limit Card -->
            <div class="card shadow-sm p-3 mb-5 bg-white rounded">
                <div class="card-body">
                    <h5 class="text-center mb-4">Set a Limit on Live Total Amperage</h5>
                    <div class="input-group mb-3">
                        <input type="number" class="form-control" placeholder="Enter amperage limit" aria-label="Amperage limit" >
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" @onclick="SetLimit">Set Limit</button>
                        </div>
                    </div>
                   
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<ElectricModel> CircuitsData { get; set; } = new List<ElectricModel>();
    private int updateKey = 0;
    private ApexChartOptions<ElectricModel> options { get; set; } = new();

    public decimal TotalAmperage { get; set; } = 0;

    protected override void OnInitialized()
    {
        UIDataService.OnDataUpdated += DataUpdatedHandler;

        options.PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal
                            {
                                FontSize = "24px",
                                Color = "#D807B8",
                                Formatter = @"function (w) {
                                return w.globals.seriesTotals.reduce((a, b) => { return a + b; }, 0).toFixed(2) + ' Amps';
                            }"
                            }
                        }
                    }
                }
            };
    }

    private void DataUpdatedHandler(List<ElectricModel> data)
    {
        InvokeAsync(() =>
        {
            CircuitsData = data;
            TotalAmperage = CircuitsData.Sum(e => e.Amps);
            updateKey++;  // Increment key to force re-render
            StateHasChanged(); // Re-render the component with the new data
        });
    }

    public void Dispose()
    {
        UIDataService.OnDataUpdated -= DataUpdatedHandler; // Cleanup to avoid memory leaks
    }

    private void SetLimit()
    {
        
    }
}
