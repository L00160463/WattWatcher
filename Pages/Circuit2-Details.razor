@page "/circuit2"
@using WattWatcher.Data
@inject ElectricService ElectricService
@inject AverageService AverageService
@inject NavigationManager NavigationManager
@inject SmsService SmsService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3 class="mb-4 text-center">Kitchen Circuit Details</h3>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-md-12">
            <!-- Bar Chart for Daily Average Amperage -->
            <div class="card shadow-sm p-3 mb-4 bg-white rounded">
                <div class="card-body">
                    <h4 class="text-center mb-4">Average Amperage This Week (Kitchen)</h4>
                    @if (chartModels != null && chartModels.Any())
                    {
                        <ApexChart TItem="ChartModel"
                                   Title="Average Amperage">
                            <ApexPointSeries TItem="ChartModel"
                                             Items="chartModels"
                                             Name="Amperage"
                                             XValue="@(e => e.Date)"
                                             YValue="@(e => e.AvgAmps)"
                                             SeriesType="SeriesType.Bar" />
                        </ApexChart>
                    }
                    else
                    {
                        <p>Loading data...</p>
                    }
                </div>
            </div>

            <div class="text-center mb-3">
                <button class="btn btn-primary mr-2" @onclick="GoToPreviousWeek">Previous Week</button>
                <button class="btn btn-primary" @onclick="GoToNextWeek">Next Week</button>
            </div>

            <!-- Live Data Display -->
            @if (Circuit2Data != null)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        Live Energy Consumption
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-around text-center mb-3">
                            <div>
                                <h6>Watts</h6>
                                <span class="text-primary font-weight-bold">@Circuit2Data.Watts W</span>
                            </div>
                            <div>
                                <h6>kWh</h6>
                                <span class="text-success font-weight-bold">@Circuit2Data.Kwh kWh</span>
                            </div>
                            <div>
                                <h6>Amps</h6>
                                <span class="text-danger font-weight-bold">@Circuit2Data.Amps A</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Set Limit Form -->
            <div class="card shadow-sm p-3 mb-4 bg-white rounded">
                <div class="card-body">
                    <h5 class="text-center mb-4">Set Weekly Cost Limit (Euro)</h5>
                    <form>
                        <div class="input-group mb-3">
                            <input type="number" class="form-control" placeholder="Enter new limit" aria-label="New Euro limit" @bind="costLimit2">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="SetLimit">Set Limit</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Summary and Recommendations -->
            <div class="card mb-4">
                <div class="card-header">
                    Monthly Summary and Recommendations
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Energy Usage This Week: <strong>@totalKwhUsage.ToString("N2") kWh</strong></li>
                        <li class="list-group-item">Cost This Week: <strong>€@totalCost.ToString("N2")</strong></li>
                        <li class="list-group-item">Average Daily Use: <strong>@averageDailyKwh.ToString("N2") kWh</strong></li>
                        <li class="list-group-item">
                            Recommended Actions:
                            <ul>
                                <li>Consider LED lighting to reduce usage</li>
                                <li>Unplug devices when not in use</li>
                                <li>Perform regular maintenance checks</li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChartModel> chartModels = new List<ChartModel>();
    public ElectricModel Circuit2Data { get; set; }
    private decimal totalKwhUsage = 0;
    private decimal totalCost = 0;
    private decimal averageDailyKwh = 0;
    private decimal costLimit2 = 0; // User-defined cost limit in euros
    private bool alertSent = false;

    protected override async Task OnInitializedAsync()
    {
        ElectricService.OnDataUpdated += UpdateData;
        costLimit2 = await LocalStorage.GetItemAsync<decimal>("CostLimitCircuit2");
        await LoadChartData();
    }

    private async Task LoadChartData()
    {
        var averages = await AverageService.GetDailyAveragesAsync();
        if (averages != null)
        {
            chartModels = averages.Select(kvp => new ChartModel
                {
                    Date = kvp.Key.ToString("ddd d/MM/yy"),
                    AvgAmps = (decimal)kvp.Value.AvgAmpsCircuit2,
                    AvgKwh = (decimal)kvp.Value.AvgKwhCircuit2
                })
            .OrderBy(model => ((int)DateTime.ParseExact(model.Date, "ddd d/MM/yy", null).DayOfWeek + 6) % 7)
            .ToList();

            totalKwhUsage = chartModels.Sum(x => x.AvgKwh);
            totalCost = totalKwhUsage * 0.35m;  // Assuming €0.35 per kWh
            averageDailyKwh = totalKwhUsage / chartModels.Count;
        }
    }

    private void UpdateData(int circuitId, ElectricModel newData)
    {
        InvokeAsync(() =>
        {
            if (circuitId == 2)
            {
                Circuit2Data = newData;
                StateHasChanged();
            }
        });
    }

    private void SetLimit()
    {
        LocalStorage.SetItemAsync("CostLimitCircuit2", costLimit2);
        CheckCostAlert();
    }

    private void CheckCostAlert()
    {
        if (totalCost > costLimit2 * 1.1m)
        {
            // If the cost exceeds the limit by more than 10%, send a warning message
            SmsService.SendSms("+353871146998", $"Warning: Your electricity cost for the Kitchen this week is €{totalCost:N2}, which exceeds your set limit of €{costLimit2:N2} by more than 10%. Please consider reducing your energy consumption.");
        }
        else if (totalCost >= costLimit2 * 0.9m)
        {
            // If the cost is within 10% of the limit (either slightly below or above but not exceeding by 10%), send an alert message
            SmsService.SendSms("+353871146998", $"Alert: Your electricity cost for the Kitchen this week is €{totalCost:N2}, which is within 10% of your set limit of €{costLimit2:N2}.");
        }
        else
        {
            // If the cost is below the lower 10% threshold, consider sending a different kind of message (optional)
            SmsService.SendSms("+353871146998", $"Notice: Your electricity cost for the Kitchen this week is €{totalCost:N2}, which is below your set limit of €{costLimit2:N2}. Great job on conserving energy!");
        }
        
    }
    private void GoToPreviousWeek()
    {
        // Logic to navigate to the previous week's data
    }

    private void GoToNextWeek()
    {
        // Logic to navigate to the next week's data
    }

    public void Dispose()
    {
        ElectricService.OnDataUpdated -= UpdateData;
    }

    public class ChartModel
    {
        public string Date { get; set; }
        public decimal AvgAmps { get; set; }
        public decimal AvgKwh { get; set; }
    }
}
