@page "/circuit2"
@using WattWatcher.Data
@inject ElectricService ElectricService
@inject AverageService AverageService

<h3 class="mb-4 text-center">Circuit 2 Details</h3>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-md-12">
            <!-- Bar Chart for Daily Average Amperage -->
            <div class="card shadow-sm p-3 mb-4 bg-white rounded">
                <div class="card-body">
                    <h4 class="text-center mb-4">Average Amperage This Week (Circuit 2)</h4>
                    @if (chartModels != null && chartModels.Any())
                    {
                        <ApexChart TItem="ChartModel"
                                   Title="Average Amperage">
                            <ApexPointSeries TItem="ChartModel"
                                             Items="chartModels"
                                             Name="Amperage"
                                             XValue="@(e => e.Date)"
                                             YValue="@(e => e.Value)"
                                             SeriesType="SeriesType.Bar" />
                        </ApexChart>
                    }
                    else
                    {
                        <p>Loading data...</p>
                    }
                </div>
            </div>

            <!-- Live Data Display -->
            @if (Circuit2Data != null)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        Live Energy Consumption
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-around text-center mb-3">
                            <div>
                                <h6>Watts</h6>
                                <span class="text-primary font-weight-bold">@Circuit2Data.Watts W</span>
                            </div>
                            <div>
                                <h6>kWh</h6>
                                <span class="text-success font-weight-bold">@Circuit2Data.Kwh kWh</span>
                            </div>
                            <div>
                                <h6>Amps</h6>
                                <span class="text-danger font-weight-bold">@Circuit2Data.Amps A</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Summary and Recommendations -->
            <div class="card mb-4">
                <div class="card-header">
                    Monthly Summary and Recommendations
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Energy Usage This Week: <strong>450 kWh</strong></li>
                        <li class="list-group-item">Cost This Week: <strong>€120.00</strong></li>
                        <li class="list-group-item">Average Daily Use: <strong>15 kWh</strong></li>
                        <li class="list-group-item">
                            Recommended Actions:
                            <ul>
                                <li>Consider LED lighting to reduce usage</li>
                                <li>Unplug devices when not in use</li>
                                <li>Perform regular maintenance checks</li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<ChartModel> chartModels = new List<ChartModel>();
    public ElectricModel Circuit2Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ElectricService.OnDataUpdated += UpdateData;
        var averages = await AverageService.GetDailyAveragesAsync();
        if (averages != null)
        {
            chartModels = averages.Select(kvp => new ChartModel
                {
                    Date = kvp.Key.ToString("ddd d/MM/yy"),
                    Value = (decimal)kvp.Value.AvgAmpsCircuit2  // Cast double to decimal
                })
                .OrderBy(model => ((int)DateTime.ParseExact(model.Date, "ddd d/MM/yy", null).DayOfWeek + 6) % 7)  // Adjust for Monday start
                .ToList();
        }
    }

    private void UpdateData(int circuitId, ElectricModel newData)
    {
        InvokeAsync(() =>
        {
            if (circuitId == 2) // Only update if the data is for Circuit 1
            {
                Circuit2Data = newData;
                StateHasChanged(); // Re-render the component with the new data
            }
        });
    }

    public void Dispose()
    {
        ElectricService.OnDataUpdated -= UpdateData;
    }

    public class ChartModel
    {
        public string Date { get; set; }
        public decimal Value { get; set; }
    }
}
